server {
    listen 80;
    server_name a8affbb4c183646a5be5e7ab9533234d-1486215781.us-east-1.elb.amazonaws.com;


    location = /login {
        return 301 $scheme://$host$uri/;
    }
    # Serve the Login application
    location /login/ {
        alias /var/www/html/login/;
        try_files $uri $uri/ /login/index.html;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma "no-cache";

        # CORS configuration for production
        add_header 'Access-Control-Allow-Origin' 'http://a1bbbfdb6e71e4295b646eb7b2137f14-1672741542.us-east-1.elb.amazonaws.com';  # Replace with actual domain
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';
        add_header 'Access-Control-Allow-Credentials' 'true';  # If cookies or credentials are needed

        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' 'http://a1bbbfdb6e71e4295b646eb7b2137f14-1672741542.us-east-1.elb.amazonaws.com';  # Replace with actual domain
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';
            add_header 'Access-Control-Max-Age' '86400';  # Cache preflight response for 24 hours
            return 204;
        }
    }

    # Serve the remoteEntry.mjs for the Login application
    location /login/remoteEntry.mjs {
        alias /var/www/html/login/remoteEntry.mjs;
        types { 
            application/javascript mjs;
        }
        add_header 'Access-Control-Allow-Origin' 'http://a1bbbfdb6e71e4295b646eb7b2137f14-1672741542.us-east-1.elb.amazonaws.com';  # Replace with actual domain
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';
        add_header 'Access-Control-Allow-Credentials' 'true';  # If cookies or credentials are needed
    }

    # Custom error pages for server errors
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /etc/nginx/html;
        internal;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma "no-cache";
    }

    # Handle other error pages
    error_page 404 /404.html;
    location = /404.html {
        root /etc/nginx/html;
        internal;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma "no-cache";
    }
}
